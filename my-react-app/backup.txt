// typescript
// import * as cdk from '@aws-cdk/core';
// import * as s3 from '@aws-cdk/aws-s3';
// import * as lambda from '@aws-cdk/aws-lambda';
// import * as apigateway from '@aws-cdk/aws-apigateway';
// import * as dynamodb from '@aws-cdk/aws-dynamodb';
// import * as ec2 from '@aws-cdk/aws-ec2';
// import * as events from '@aws-cdk/aws-events';
// import * as targets from '@aws-cdk/aws-events-targets';
// import * as path from 'path';

// export class FileUploadStack extends cdk.Stack {
//   constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {
//     super(scope, id, props);

//     // S3 Bucket for file uploads
//     const bucket = new s3.Bucket(this, 'FileUploadBucket');

//     // DynamoDB Table to store file info
//     const fileTable = new dynamodb.Table(this, 'FileTable', {
//       partitionKey: { name: 'fileId', type: dynamodb.AttributeType.STRING }
//     });

//     // Lambda function to handle file upload
//     const uploadHandler = new lambda.Function(this, 'UploadHandler', {
//       runtime: lambda.Runtime.NODEJS_14_X,
//       handler: 'upload.handler',
//       code: lambda.Code.fromAsset(path.join(__dirname, '..', 'lambda')), // Assuming lambda code is in 'lambda' directory
//       environment: {
//         FILE_TABLE_NAME: fileTable.tableName,
//         BUCKET_NAME: bucket.bucketName
//       }
//     });

//     // Grant permissions to the Lambda function to interact with S3 and DynamoDB
//     bucket.grantReadWrite(uploadHandler);
//     fileTable.grantReadWriteData(uploadHandler);

//     // API Gateway to trigger the Lambda function
//     const api = new apigateway.RestApi(this, 'FileUploadApi');
//     const integration = new apigateway.LambdaIntegration(uploadHandler);
//     api.root.addMethod('POST', integration);

//     // EC2 Instance for script execution
//     const vpc = new ec2.Vpc(this, 'ScriptExecutionVpc', {
//       maxAzs: 2 // Adjust as needed
//     });

//     const instance = new ec2.Instance(this, 'ScriptExecutionInstance', {
//       vpc,
//       instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.MICRO),
//       machineImage: ec2.MachineImage.latestAmazonLinux(),
//     });

//     // Download and run script on EC2 instance on DynamoDB event
//     const rule = new events.Rule(this, 'DynamoDBEventRule', {
//       eventPattern: {
//         source: ['aws.dynamodb'],
//         detailType: ['AWS API Call via CloudTrail'],
//         detail: {
//           eventSource: ['dynamodb.amazonaws.com'],
//           eventName: ['InsertItem']
//         }
//       }
//     });
//     rule.addTarget(new targets.Ec2Instance(instance));
//   }
// }
